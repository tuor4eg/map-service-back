name: Deploy Main to VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

    - name: Build Docker image
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/lams-backend:latest .

    - name: Push Docker image to Docker Hub
      run: docker push ${{ secrets.DOCKER_USERNAME }}/lams-backend:latest

    - name: Copy docker-compose.yml to VPS
      uses: appleboy/scp-action@v0.1.0
      with:
        host: ${{ secrets.VPS_HOST_PROD }}
        username: ${{ secrets.VPS_USER_PROD }}
        key: ${{ secrets.VPS_SSH_KEY_PROD }}
        source: "./docker-compose.yml"
        target: "/opt/lams/lams-back"
        overwrite: true

    - name: Log in to Docker Hub on VPS and deploy
      uses: appleboy/ssh-action@v1.2.0
      with:
        host: ${{ secrets.VPS_HOST_PROD }}
        username: ${{ secrets.VPS_USER_PROD }}
        key: ${{ secrets.VPS_SSH_KEY_PROD }}
        script: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          cd /opt/lams/lams-back

          # Очищаем только старые образы бэкенда
          # Находим ID образа текущего бэкенда
          CURRENT_BACKEND_IMAGE=$(docker images ${{ secrets.DOCKER_USERNAME }}/lams-backend:latest -q)
          
          # Удаляем только старые образы бэкенда, сохраняя текущий
          if [ ! -z "$CURRENT_BACKEND_IMAGE" ]; then
            docker images | grep "${{ secrets.DOCKER_USERNAME }}/lams-backend" | grep -v "$CURRENT_BACKEND_IMAGE" | awk '{print $3}' | xargs -r docker rmi
          fi
          
          # Удаляем только dangling образы (без тегов)
          docker image prune -f

          docker-compose pull
          docker-compose up -d

